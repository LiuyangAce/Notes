1.对象的介绍
    无序属性的集合，一般用于保存信息
        商品信息：名称、价格、生产日期、评论...
        个人信息：身份证、姓名、性别、年龄、电话号码...
    对象的属性没有先后顺序，也就是说对象属性的编写顺序不会影响对象的最终结果
2.创建对象
    0)写法/创建规则
        1.对象以{}为边界
        2.{}内可以保存零到多个键值对
        3.键值对由键名【属性名】和键值【属性值】组成，
        名值之间通过:隔开，不同的键值对之间通过,隔开
        4.键的名字一般不需要使用''【键名中存在空格就需要】,
        键值一般需要使用''【数字的时候可以不用】
        5.键值【属性值】可以是任意的数据类型
            var obj = {
                name:{}
            }
                
    1）对象的字面量【使用频率高，也可以使用obj.属性名】
        var obj = {
            键名:键值,
            键名:键值,
            键名:键值
        };
            
            1)var obj = {
                    id:1,
                    name:tom
            };
            console.log(obj);//
            报错原因：如果属性值不加引号，会被解析为变量，就要去
            文件中寻找通过通过关键字var声明的变量，找不到则报错

            2)var tom = '123';
            var obj = {
                    id:1,
                    name:tom
            };

            console.log(obj);//{id:1,name:'123'}
            3)var obj = {
                    id:1,
                    name:'tom'
            };
            console.log(obj);//{id:1,name:'tom'}
            4)var tom = 123;
            var obj = {
                    id:1,
                    name:tom,
                    'say address':function(){
                            console.log('江苏昆山');
                    }
            };
            console.log(obj);//{ id: 1, name: 123, 'say address': [Function: say address] }
    2）构造函数Object
        构造函数一般通过new关键字调用
            var obj = new Object();
            obj.id = 1;
            obj.name = 'tom';
            console.log(obj);//{id:1,name:'tom'}
    
    对象的比较
        情况一：
        情况二：
3.对象的访问
    对象名.属性名
        var obj = {
            id:1,
            name:'tom',
        };
        console.log(obj.id);
        console.log(obj.name);

    对象名[属性名]
        var obj = {
            id:1,
            name:'tom',
            'say address':function(){
                    console.log('江苏昆山');
                }
        };
        console.log(obj['say address']);//[Function: say address]
        console.log(obj['name']); //tom
        console.log(obj[name]); //name is not defined
4.对象属性的删除
    delete 对象名.属性名
    删除当前访问到的属性名所对应的整个键值对
    var obj = {
        id:1,
        name:'tom'
    };
    console.log(obj);//{ id: 1, name: 'tom' }
    delete obj.id;//{ name: 'tom' }
    console.log(obj);
5.修改对象
    如国访问到的属性在对象中存在，则是修改操作；不存在，则是新增操作              
    var obj = {
        id:1,
        name:'tom'
    };
    obj.id = 2;//修改操作 2
    obj.age = 13;//新增操作
    v-model

6.属性检测
    检测某个属性是否属于某个对象
    in
        var obj = {
        id:1,
        name:'tom'
    };
    console.log('id' in obj);//ture
    console.log('age' in obj);//false

    hasOwnProperty() 【了解】
    propertyIsEnumerable 【了解】

    自由属性
        在当前对象中直接创建的属性
        var obj = {
            id:1,
            name:'tom'
        };
        console.log('id' in obj);//true
        console.log('age' in obj);
        console.log(obj.toString());
        console.log(toString() in obj);//false
    继承属性
        一般是当前对象的构造函数原型上的方法。
7.对象序列化
    序列化 
        将对象转化为json字符串【'{"name":"tom"}'】,使用JSON.stringify()
        var obj = {
            id:1,
            name:'tom'
        }
        console.log(obj);//{ id: 1, name: 'tom' }
        console.log(JSON.stringify(obj));//{"id":1,"name":"tom"}
    反序列化
        将json字符串转化为对象，使用JSON.parse()
    使用场景：
        1.登录接口所需要的参数格式为json字符串
        2.路由传参，A页面传递对象时，先序列化，B页面使用时，先反序列化为对象，再访问对象的属性时候
        不使用序列化，对象会被解析为[object Object]，在B页面就访问不到
        3.将对象存储到浏览器中，也需要先序列化，然后再存储。
8.对象的遍历
    一次性获取对象中的所有属性
        for-in循环
        var obj = {
            id:1,
            name:'tom',
            age:13
        };
        for (var key in obj){
                console.log(obj[key]);
        }
        key是被遍历对象的键名
        obj是被遍历对象
        obj[key]是被遍历对象的键值


object.definedProperty() vue2.x的核心原理
object.freeze() 冻结对象，vue中对于长列表的优化方式 

